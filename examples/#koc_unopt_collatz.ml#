let t = Unix.gettimeofday() in 
let chan_A_B = Domainslib.Chan.make_bounded 0
and chan_A_C = Domainslib.Chan.make_bounded 0
and chan_A_D = Domainslib.Chan.make_bounded 0
and chan_A_E = Domainslib.Chan.make_bounded 0
and chan_A_F = Domainslib.Chan.make_bounded 0
and chan_A_G = Domainslib.Chan.make_bounded 0
and chan_B_A = Domainslib.Chan.make_bounded 0
and chan_B_C = Domainslib.Chan.make_bounded 0
and chan_B_D = Domainslib.Chan.make_bounded 0
and chan_B_E = Domainslib.Chan.make_bounded 0
and chan_B_F = Domainslib.Chan.make_bounded 0
and chan_B_G = Domainslib.Chan.make_bounded 0
and chan_C_A = Domainslib.Chan.make_bounded 0
and chan_C_B = Domainslib.Chan.make_bounded 0
and chan_C_D = Domainslib.Chan.make_bounded 0
and chan_C_E = Domainslib.Chan.make_bounded 0
and chan_C_F = Domainslib.Chan.make_bounded 0
and chan_C_G = Domainslib.Chan.make_bounded 0
and chan_D_A = Domainslib.Chan.make_bounded 0
and chan_D_B = Domainslib.Chan.make_bounded 0
and chan_D_C = Domainslib.Chan.make_bounded 0
and chan_D_E = Domainslib.Chan.make_bounded 0
and chan_D_F = Domainslib.Chan.make_bounded 0
and chan_D_G = Domainslib.Chan.make_bounded 0
and chan_E_A = Domainslib.Chan.make_bounded 0
and chan_E_B = Domainslib.Chan.make_bounded 0
and chan_E_C = Domainslib.Chan.make_bounded 0
and chan_E_D = Domainslib.Chan.make_bounded 0
and chan_E_F = Domainslib.Chan.make_bounded 0
and chan_E_G = Domainslib.Chan.make_bounded 0
and chan_F_A = Domainslib.Chan.make_bounded 0
and chan_F_B = Domainslib.Chan.make_bounded 0
and chan_F_C = Domainslib.Chan.make_bounded 0
and chan_F_D = Domainslib.Chan.make_bounded 0
and chan_F_E = Domainslib.Chan.make_bounded 0
and chan_F_G = Domainslib.Chan.make_bounded 0
and chan_G_A = Domainslib.Chan.make_bounded 0
and chan_G_B = Domainslib.Chan.make_bounded 0
and chan_G_C = Domainslib.Chan.make_bounded 0
and chan_G_D = Domainslib.Chan.make_bounded 0
and chan_G_E = Domainslib.Chan.make_bounded 0
and chan_G_F = Domainslib.Chan.make_bounded 0 in
let domain_A =
  Domain.spawn (fun _ ->
    let rec test_collatz inp =
      if inp = 1
      then 0
      else (
        let rec res1 = inp / 2 in
        let rec res2 = res1 * 2 in
        if res2 = inp
        then (
          let rec part_res = test_collatz res1 in
          part_res + 1)
        else (
          let rec res3 = (3 * inp) + 1 in
          let rec res4 = test_collatz res3 in
          1 + res4))
    in
    let rec _unit_1 = () in
    let rec _unit_2 = () in
    let rec _unit_3 = () in
    let rec _unit_4 = () in
    let rec _unit_5 = () in
    let rec _unit_6 = () in
    let rec broadcast_opt freq =
      if freq > 0
      then (
        Domainslib.Chan.send chan_A_B "L1";
        Domainslib.Chan.send chan_A_C "L2";
        Domainslib.Chan.send chan_A_D "L3";
        Domainslib.Chan.send chan_A_E "L4";
        Domainslib.Chan.send chan_A_F "L5";
        Domainslib.Chan.send chan_A_G "L6";
        let rec _unit_12 = () in
        let rec reply_B = Marshal.from_string (Domainslib.Chan.recv chan_B_A) 0 in
nn        let rec _unit_11 = () in
        let rec reply_C = Marshal.from_string (Domainslib.Chan.recv chan_C_A) 0 in
        let rec _unit_10 = () in
        let rec reply_D = Marshal.from_string (Domainslib.Chan.recv chan_D_A) 0 in
        let rec _unit_9 = () in
        let rec reply_E = Marshal.from_string (Domainslib.Chan.recv chan_E_A) 0 in
        let rec _unit_8 = () in
        let rec reply_F = Marshal.from_string (Domainslib.Chan.recv chan_F_A) 0 in
        let rec _unit_7 = () in
        let rec reply_G = Marshal.from_string (Domainslib.Chan.recv chan_G_A) 0 in
        let () =
          Printf.printf "Loop execution time: %fs \n" (Unix.gettimeofday() -. t)
        in
        broadcast_opt (freq - 1))
      else (
        Domainslib.Chan.send chan_A_B "R1";
        Domainslib.Chan.send chan_A_C "R2";
        Domainslib.Chan.send chan_A_D "R3";
        Domainslib.Chan.send chan_A_E "R4";
        Domainslib.Chan.send chan_A_F "R5";
        Domainslib.Chan.send chan_A_G "R6";
        print_endline "Done with all the computations")
    in
    broadcast_opt 10000000)
and domain_B =
  Domain.spawn (fun _ ->
    let rec _unit_13 = () in
    let rec test_collatz inp =
      if inp = 1
      then 0
      else (
        let rec res1 = inp / 2 in
        let rec res2 = res1 * 2 in
        if res2 = inp
        then (
          let rec part_res = test_collatz res1 in
          part_res + 1)
        else (
          let rec res3 = (3 * inp) + 1 in
          let rec res4 = test_collatz res3 in
          1 + res4))
    in
    let rec _unit_14 = () in
    let rec _unit_15 = () in
    let rec _unit_16 = () in
    let rec _unit_17 = () in
    let rec _unit_18 = () in
    let rec broadcast_opt freq =
      match Domainslib.Chan.recv chan_A_B with
      | "R1" -> ()
      | "L1" ->
        let rec result = test_collatz 931386509544713451 in
        let rec _unit_30 =
          let val_29 = result in
          Domainslib.Chan.send chan_B_A (Marshal.to_string val_29 [])
        in
        let rec _unit_28 = () in
        let rec _unit_27 = () in
        let rec _unit_26 = () in
        let rec _unit_25 = () in
        let rec _unit_24 = () in
        let rec _unit_23 = () in
        let rec _unit_22 = () in
        let rec _unit_21 = () in
        let rec _unit_20 = () in
        let rec _unit_19 = () in
        broadcast_opt ()
      | _ -> failwith "Error: Unmatched label"
    in
    broadcast_opt ())
and domain_C =
  Domain.spawn (fun _ ->
    let rec _unit_31 = () in
    let rec _unit_32 = () in
    let rec test_collatz inp =
      if inp = 1
      then 0
      else (
        let rec res1 = inp / 2 in
        let rec res2 = res1 * 2 in
        if res2 = inp
        then (
          let rec part_res = test_collatz res1 in
          part_res + 1)
        else (
          let rec res3 = (3 * inp) + 1 in
          let rec res4 = test_collatz res3 in
          1 + res4))
    in
    let rec _unit_33 = () in
    let rec _unit_34 = () in
    let rec _unit_35 = () in
    let rec _unit_36 = () in
    let rec broadcast_opt freq =
      match Domainslib.Chan.recv chan_A_C with
      | "R2" -> ()
      | "L2" ->
        let rec _unit_48 = () in
        let rec _unit_47 = () in
        let rec result = test_collatz 931386509544713451 in
        let rec _unit_46 =
          let val_45 = result in
          Domainslib.Chan.send chan_C_A (Marshal.to_string val_45 [])
        in
        let rec _unit_44 = () in
        let rec _unit_43 = () in
        let rec _unit_42 = () in
        let rec _unit_41 = () in
        let rec _unit_40 = () in
        let rec _unit_39 = () in
        let rec _unit_38 = () in
        let rec _unit_37 = () in
        broadcast_opt ()
      | _ -> failwith "Error: Unmatched label"
    in
    broadcast_opt ())
and domain_D =
  Domain.spawn (fun _ ->
    let rec _unit_49 = () in
    let rec _unit_50 = () in
    let rec _unit_51 = () in
    let rec test_collatz inp =
      if inp = 1
      then 0
      else (
        let rec res1 = inp / 2 in
        let rec res2 = res1 * 2 in
        if res2 = inp
        then (
          let rec part_res = test_collatz res1 in
          part_res + 1)
        else (
          let rec res3 = (3 * inp) + 1 in
          let rec res4 = test_collatz res3 in
          1 + res4))
    in
    let rec _unit_52 = () in
    let rec _unit_53 = () in
    let rec _unit_54 = () in
    let rec broadcast_opt freq =
      match Domainslib.Chan.recv chan_A_D with
      | "L3" ->
        let rec _unit_66 = () in
        let rec _unit_65 = () in
        let rec _unit_64 = () in
        let rec _unit_63 = () in
        let rec result = test_collatz 931386509544713451 in
        let rec _unit_62 =
          let val_61 = result in
          Domainslib.Chan.send chan_D_A (Marshal.to_string val_61 [])
        in
        let rec _unit_60 = () in
        let rec _unit_59 = () in
        let rec _unit_58 = () in
        let rec _unit_57 = () in
        let rec _unit_56 = () in
        let rec _unit_55 = () in
        broadcast_opt ()
      | "R3" -> ()
      | _ -> failwith "Error: Unmatched label"
    in
    broadcast_opt ())
and domain_E =
  Domain.spawn (fun _ ->
    let rec _unit_67 = () in
    let rec _unit_68 = () in
    let rec _unit_69 = () in
    let rec _unit_70 = () in
    let rec test_collatz inp =
      if inp = 1
      then 0
      else (
        let rec res1 = inp / 2 in
        let rec res2 = res1 * 2 in
        if res2 = inp
        then (
          let rec part_res = test_collatz res1 in
          part_res + 1)
        else (
          let rec res3 = (3 * inp) + 1 in
          let rec res4 = test_collatz res3 in
          1 + res4))
    in
    let rec _unit_71 = () in
    let rec _unit_72 = () in
    let rec broadcast_opt freq =
      match Domainslib.Chan.recv chan_A_E with
      | "L4" ->
        let rec _unit_84 = () in
        let rec _unit_83 = () in
        let rec _unit_82 = () in
        let rec _unit_81 = () in
        let rec _unit_80 = () in
        let rec _unit_79 = () in
        let rec result = test_collatz 931386509544713451 in
        let rec _unit_78 =
          let val_77 = result in
          Domainslib.Chan.send chan_E_A (Marshal.to_string val_77 [])
        in
        let rec _unit_76 = () in
        let rec _unit_75 = () in
        let rec _unit_74 = () in
        let rec _unit_73 = () in
        broadcast_opt ()
      | "R4" -> ()
      | _ -> failwith "Error: Unmatched label"
    in
    broadcast_opt ())
and domain_F =
  Domain.spawn (fun _ ->
    let rec _unit_85 = () in
    let rec _unit_86 = () in
    let rec _unit_87 = () in
    let rec _unit_88 = () in
    let rec _unit_89 = () in
    let rec test_collatz inp =
      if inp = 1
      then 0
      else (
        let rec res1 = inp / 2 in
        let rec res2 = res1 * 2 in
        if res2 = inp
        then (
          let rec part_res = test_collatz res1 in
          part_res + 1)
        else (
          let rec res3 = (3 * inp) + 1 in
          let rec res4 = test_collatz res3 in
          1 + res4))
    in
    let rec _unit_90 = () in
    let rec broadcast_opt freq =
      match Domainslib.Chan.recv chan_A_F with
      | "L5" ->
        let rec _unit_102 = () in
        let rec _unit_101 = () in
        let rec _unit_100 = () in
        let rec _unit_99 = () in
        let rec _unit_98 = () in
        let rec _unit_97 = () in
        let rec _unit_96 = () in
        let rec _unit_95 = () in
        let rec result = test_collatz 931386509544713451 in
        let rec _unit_94 =
          let val_93 = result in
          Domainslib.Chan.send chan_F_A (Marshal.to_string val_93 [])
        in
        let rec _unit_92 = () in
        let rec _unit_91 = () in
        broadcast_opt ()
      | "R5" -> ()
      | _ -> failwith "Error: Unmatched label"
    in
    broadcast_opt ())
and domain_G =
  Domain.spawn (fun _ ->
    let rec _unit_103 = () in
    let rec _unit_104 = () in
    let rec _unit_105 = () in
    let rec _unit_106 = () in
    let rec _unit_107 = () in
    let rec _unit_108 = () in
    let rec test_collatz inp =
      if inp = 1
      then 0
      else (
        let rec res1 = inp / 2 in
        let rec res2 = res1 * 2 in
        if res2 = inp
        then (
          let rec part_res = test_collatz res1 in
          part_res + 1)
        else (
          let rec res3 = (3 * inp) + 1 in
          let rec res4 = test_collatz res3 in
          1 + res4))
    in
    let rec broadcast_opt freq =
      match Domainslib.Chan.recv chan_A_G with
      | "R6" -> ()
      | "L6" ->
        let rec _unit_120 = () in
        let rec _unit_119 = () in
        let rec _unit_118 = () in
        let rec _unit_117 = () in
        let rec _unit_116 = () in
        let rec _unit_115 = () in
        let rec _unit_114 = () in
        let rec _unit_113 = () in
        let rec _unit_112 = () in
        let rec _unit_111 = () in
        let rec result = test_collatz 931386509544713451 in
        let rec _unit_110 =
          let val_109 = result in
          Domainslib.Chan.send chan_G_A (Marshal.to_string val_109 [])
        in
        broadcast_opt ()
      | _ -> failwith "Error: Unmatched label"
    in
    broadcast_opt ())
in
Domain.join domain_A;
Domain.join domain_B;
Domain.join domain_C;
Domain.join domain_D;
Domain.join domain_E;
Domain.join domain_F;
Domain.join domain_G
